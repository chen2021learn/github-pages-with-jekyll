//锦标赛排序
//                08
//        21              08
//    21      25*     08      63  
//  21  25  49  25* 16  08  63    
//    the previous 3 rows are full of inner points, the 4 row is full of outer points

template <class Type> class DataNode {
public:
  Type data; 
  int index;
  int active;                       // active=1 participate; =0 not;
}

template <class Type> void TournamentSort(Type a[], int n)
{
  DataNode<Type> *tree;             // array of winners
  DataNode<Type> item;
  int bottomRowSize=PowerOfTwo(n);  //find the min num >= n, which equals to 2^i
                                    // e.g. n=7, bottomRowSize=8;
  int TreeSize =2* bottomRowSize-1; // the size of array of winners: inner points + outer points
                                    // the property of binarytree, the previous n rows : total 2^n-1, the n+1 row: 2^n
  int loadindex=bottomRowSize-1;    // the place where outer points start 
  tree = new DataNode<Type>[TreeSize];
  int j=0;                          // the pointer used in array a[] to retrieve data
  
  //copy the datas from array a[] into outer points
  for (int i=loadindex; i<TreeSize; i++)        
  {
    tree[i].index=i;
    if (j<n) {tree[i].active=1; tree [i].data= a[j++];}
    else tree[i].active=0;          // blank points in the end
  }
  
  //find the smallest one
  i=loadindex;          
  while (i)
  {
    j=i;
    while(j<2*i)                    // pos j is the beginning of outer points, 2*i-1 is the last one
    {
      if (! tree[j+1].active || tree[j].data < tree[j+1].data) tree[(j-1)/2]=tree[j];
      else tree[(j-1)/2]=tree[j+1];             // find the winner(smaller one)
      j+=2;                         // find the next pair
    }
    i=(i-1)/2;                      // i return to the upper row, until i=0
  }
  
  // deal with another n-1 points
  for (i=0; i<n-1; i++)
  {
    a[i]=tree[0].data;              //send the smallest one to array a[]
    tree[tree[0].index].active=0;   //the winner will not participate
    UpdateTree( tree, tree[0].index);   // revise the Tournament Tree
  }
  a[n-1]=tree[0].data;
}

//revise the Tournament Tree. After deleting last winner, the lastest winner need to be found
template<class Type> void UpdateTree(DataNode<Type> *tree, int i)
{
  if (i%2==0) tree[(i-1)/2]=tree[i-1];      
  else tree[(i-1)/2]=tree[i+1];               // send the original opponent of last winner, send it to its parent
  
  // start to change the points above it
  while(i)
  {
    if(i%2==0) j=i-1;                         // find the opponent is on the right or on the left
    else j=i+1;
    if(! tree[i].active || ! tree[j].active)
      if ( tree[i].active) tree[(i-1)/2]=tree[i];
      else tree[(i-1)/2]=tree[j];             // 
  }
}
