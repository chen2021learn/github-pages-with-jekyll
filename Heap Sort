template<class Type> void MaxHeap<Type>::FilterDown(const int i, const int EndOfHeap)
// Start with point i, end with point EndOfHeap, compare all the points from top to bottm.
// If the value of child is smaller than parent, exchange happens. In this way, a part of set will become Maximum Heap.
{
  int current=i; int child=2*i+1;               // according to the property of binaryTree, pos(2*i+1) is the left child of pos(i)
  Type temp=list.Vector[i];                     // temporarily save
  while (child<=EndOfHeap)
  {
    if( child+1<=EndOfHeap && list.Vector[child].getKey()<list.Vector[child+1].getKey())
      child++;                                  // find the bigger between left and right
    if( temp.getKey()>=list.Vector[child].getKey()) break;
    else
    {
      list.Vector[current]=list.Vector[child];  //  bigger shifts up
      current=child;child=child*2+1;            // new parent, new left child
    }
  }
  list.Vector[current]=temp;
}


template<class Type> void HeapSort(datalist<Type> &list)
{
  for (int i=(list.CurrentSize-1)/2;i>=0;i--) FilterDown(i,list.CurrentSize-1);   // change the list into heap
  
  for (i=list.CurrentSize-1;i>=1;i--)
  {
    Swap(list.Vector[0],list.Vector[i]);
    FilterDown(0,i-1);
  }
}
